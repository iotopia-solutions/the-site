{"version":3,"sources":["blog/wordpressApi.js"],"names":["getPosts","promiseForRequest","createConfig","config","blogPostsUrl","rootUrl","postsUrl","filterQueries","category","number","Object","assign","query","timeout","Promise","resolve","reject","resolveRequest","err","resp","body","JSON","parse","common","url","method"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA;AACO,IAAMA,8BACT,SADSA,QACT;AAAA,SACAC,kBACEC,aAAaC,MAAb,EAAqBC,YAArB,EAAmC,KAAnC,CADF,CADA;AAAA,CADG;;AAMP;;AAEA;AACA,IAAMC,UAAU,sEAAhB;AACA,IAAMC,WAAW,kBAAQD,OAAR,EAAiB,OAAjB,CAAjB;AACA,IAAME,gBAAgB,EAAEC,UAAU,SAAZ,EAAuBC,QAAQ,CAA/B,EAAtB;AACA,IAAML,eACF,iBAAOM,OAAOC,MAAP,CAAc,gBAAML,QAAN,CAAd,EAA+B,EAAEM,OAAOL,aAAT,EAA/B,CAAP,CADJ;;AAGA;AACA,IAAMM,UAAU,IAAhB,C,CAAsB;AACtB,IAAMV,SAAS,EAAEU,gBAAF,EAAf;;AAEA;;AAEA;AACA;AACA,IAAMZ,oBACF,SADEA,iBACF,CAACE,MAAD;AAAA,SACA,IAAIW,OAAJ,CACE,UAACC,OAAD,EAAUC,MAAV;AAAA,WAAqB,uBAAQb,MAAR,EAAgBc,eAAeF,OAAf,EAAwBC,MAAxB,CAAhB,CAArB;AAAA,GADF,CADA;AAAA,CADJ;;AAMA;AACA,IAAMC,iBACF,SADEA,cACF,CAACF,OAAD,EAAUC,MAAV;AAAA,SAAqB,UAACE,GAAD,EAAMC,IAAN,EAAYC,IAAZ,EAAqB;AAC1C,QAAIF,GAAJ,EAAS;AACPF,aAAOE,GAAP;AACD,KAFD,MAGK;AACHH,cAAQ,CAAEI,IAAF,EAAQE,KAAKC,KAAL,CAAWF,IAAX,CAAR,CAAR;AACD;AACF,GAPC;AAAA,CADJ;;AAUA;AACA,IAAMlB,eACF,SADEA,YACF,CAACqB,MAAD,EAASC,GAAT,EAAcC,MAAd;AAAA,SACAf,OAAOC,MAAP,CAAc,EAAd,EAAkBY,MAAlB,EAA0B,EAAEC,QAAF,EAAOC,cAAP,EAA1B,CADA;AAAA,CADJ","file":"blog/wordpressApi.js","sourcesContent":["import { resolve, parse, format } from 'url';\nimport request from 'request';\n\n// Fetches blog posts from wordpress api.\nexport const getPosts\n  = () =>\n    promiseForRequest(\n      createConfig(config, blogPostsUrl, 'GET')\n    );\n\n// ------------------------------------------------------------\n\n// Urls.  We might consider moving these to a config file.\nconst rootUrl = 'https://public-api.wordpress.com/rest/v1.1/sites/innovatorylife.com/';\nconst postsUrl = resolve(rootUrl, 'posts');\nconst filterQueries = { category: 'company', number: 5 };\nconst blogPostsUrl\n  = format(Object.assign(parse(postsUrl), { query: filterQueries }));\n\n// Request config. These should be injected into `promiseForRequest` from a config file.\nconst timeout = 5000; // msecs\nconst config = { timeout };\n\n// ------------------------------------------------------------\n\n// Creates a promise for a request.\n// Could be useful for other http calls.\nconst promiseForRequest\n  = (config) =>\n    new Promise(\n      (resolve, reject) => request(config, resolveRequest(resolve, reject))\n  );\n\n// Converts request's node-style callback to a Promise's constructor args.\nconst resolveRequest\n  = (resolve, reject) => (err, resp, body) => {\n    if (err) {\n      reject(err);\n    }\n    else {\n      resolve([ resp, JSON.parse(body) ]);\n    }\n  };\n\n// Constructs a request config from a common config and specific url and method.\nconst createConfig\n  = (common, url, method) =>\n    Object.assign({}, common, { url, method });\n"],"sourceRoot":"/Users/john/Code/the-site/es6"}